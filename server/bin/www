#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
const socketio = require('socket.io');
const { log } = require('console');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketio(server, {
  cors: {
    origin: 'http://localhost:3000',
    methods: ['GET', 'POST'],
  },
});

/**
 * Socket Connection
 */
// Random color:
const randomColor = () => {
   return '#' + Math.floor(Math.random() * 16777215).toString(16);
}

// Get all users:
const getAllUsers = (sockets) => {
  const users = [];
  const connections = sockets.values();
  for (const item of connections) {
    users.push({ name: item.name, id: item.id, color: item.color });
  }
  return users;
};

let songs = '';
let currentSongName = '';
let currentIdx = 0;
let guessSongName = ''

io.on('connection', (socket) => {
  console.log('New user connected!');

  const name = 'Dylan(Host)';
  const color = randomColor();

  socket.name = name;
  socket.color = color;
  const users = getAllUsers(io.sockets.sockets);
  socket.emit('INITIAL_CONNECTION', { name, color, users });
  
  socket.broadcast.emit('NEW_USER', { name, id: socket.id, color });

  socket.on('SEND_MESSAGE', (msg) => {
    io.emit('SEND_MESSAGE', { ...msg, id: 'xxx' });
    guessSongName = msg.msg.toLowerCase()
    console.log('guessss', guessSongName);

    if (guessSongName === currentSongName) {
      console.log('right answer');
      io.emit('CORRECT_GUESS', { msg });
      currentSongName = '';
    } else {
      io.emit('INCORRECT_GUESS', { msg });
      console.log('wrong answer');
    }
    
  });

  socket.on('START_GAME', (msg) => {
    console.log('Game started!');

    // Send to front end
    io.emit('START_GAME',  (msg) );
    // currentSongName = msg.msg.song.toLowerCase();
    songs = msg.msg.songs
    currentSongName = msg.msg.songs[currentIdx].title.toLowerCase();
  });

  // Will be from the host
  socket.on('NEXT_ROUND',  ({msg}) => {
    console.log('curentSong',msg);
    // set currentSongName = currentSongName
    // currentSongName = msg.msg.toLowerCase()
      // io.emit('END_GAME', {msg});
    if (msg === songs.length) {
      return
    }
    currentSongName = songs[msg].title.toLowerCase();
  });

  // Will be from players
  socket.on('GUESS', (msg) => {
    if (msg.guess === currentSongName) {
      io.emit('CORRECT_GUESS', { msg });
      currentSongName = '';
    } else {
      io.emit('INCORRECT_GUESS', { msg });
    }
  });

  socket.on('disconnect', () => {
    io.emit('DISCONNECT_USER', { name: socket.name, id: socket.id });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`Server is running on ${port}`);
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
